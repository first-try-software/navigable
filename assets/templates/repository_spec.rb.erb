require_relative '../../../resources/<%= @resource_name %>/repository'

RSpec.describe <%= @resource_klass %>::Repository do
  subject(:repository) { described_class }

  describe '.all' do
    subject(:all) { repository.all }

    it 'retrieves all the entities'
  end

  describe '.find' do
    subject(:find) { repository.find(id) }

    let(:id) { 'id' }

    context 'when the entity is NOT found' do
      it 'returns nil'
    end

    context 'when the entity is found' do
      it 'returns the entity'
    end
  end

  describe '.insert' do
    subject(:insert) { repository.insert(entity) }

    let(:entity) { instance_double(<%= @entity_klass %>) }

    context 'always' do
      it 'assigns created_at timestamp'
      it 'assigns updated_at timestamp'
    end

    context 'when the entity is NOT created' do
      it 'returns nil'
    end

    context 'when the entity is created' do
      it 'returns the created entity'
    end
  end

  describe '.update' do
    subject(:update) { repository.update(entity) }

    let(:entity) { instance_double(<%= @entity_klass %>) }

    context 'always' do
      it 'updates the updated_at timestamp'
    end

    context 'when the entity is NOT updated' do
      it 'returns nil'
    end

    context 'when the entity is updated' do
      it 'returns the updated entity'
    end
  end

  describe '.delete' do
    subject(:delete) { repository.delete(id) }

    let(:id) { 'id' }

    context 'when the entity is NOT deleted' do
      it 'returns nil'
    end

    context 'when the entity is deleted' do
      it 'returns the deleted entity'
    end
  end
end