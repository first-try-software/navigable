require_relative '../../../domain/<%= @resource_name %>/delete'

RSpec.describe <%= @resource_klass %>::Delete do
  subject(:command) { described_class.new(params, listeners) }

  let(:params) { { id: 123 } }
  let(:listeners) { [] }

  describe '#execute' do
    subject(:execute) { command.execute }

    before do
      allow(<%= @resource_klass %>::Repository).to receive(:find).and_return(existing_<%= @entity_name %>)
    end

    context 'when the <%= @entity_name %> is NOT found' do
      let(:existing_<%= @entity_name %>) { nil }

      it 'returns a 404 response' do
        expect(execute).to have_attributes(status: 404)
      end
    end

    context 'when the <%= @entity_name %> is found' do
      let(:existing_<%= @entity_name %>) { instance_double(<%= @entity_klass %>) }

      before do
        allow(<%= @resource_klass %>::Repository).to receive(:delete).and_return(deleted_<%= @entity_name %>)
      end

      context 'and the <%= @entity_name %> is NOT deleted' do
        let(:deleted_<%= @entity_name %>) { nil }

        it 'returns a 500 response' do
          expect(execute).to have_attributes(status: 500)
        end
      end

      context 'and the <%= @entity_name %> is deleted' do
        let(:deleted_<%= @entity_name %>) { instance_double(<%= @entity_klass %>) }

        it 'returns a 200 response' do
          expect(execute).to have_attributes(status: 200)
        end
      end
    end
  end
end